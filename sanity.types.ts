/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Footer = {
  _id: string;
  _type: "footer";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  categories?: string;
  cat_name?: Array<string>;
  top_games?: string;
  support?: string;
  support_name?: Array<string>;
  copy?: string;
  desc?: string;
};

export type Games = {
  _id: string;
  _type: "games";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  poster?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  name?: string;
  slug?: Slug;
  price?: number;
  details?: string;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Banner = {
  _id: string;
  _type: "banner";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  overlay?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  largeText?: string;
  smallText?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Footer | Games | Slug | Banner | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/banner/getBannerData.ts
// Variable: BANNER_QUERY
// Query: *[_type == "banner"][0] {      _id,      largeText,      smallText,      "image": image.asset->url,      "overlay": overlay.asset->url    }
export type BANNER_QUERYResult = {
  _id: string;
  largeText: string | null;
  smallText: string | null;
  image: string | null;
  overlay: string | null;
} | null;

// Source: ./sanity/lib/footer/getFooterData.ts
// Variable: FOOTER_QUERY
// Query: *[_type == "footer"] {      _id,      categories,      cat_name,      top_games,      support,      support_name,      copy,      desc    }
export type FOOTER_QUERYResult = Array<{
  _id: string;
  categories: string | null;
  cat_name: Array<string> | null;
  top_games: string | null;
  support: string | null;
  support_name: Array<string> | null;
  copy: string | null;
  desc: string | null;
}>;

// Source: ./sanity/lib/games/getAllGames.ts
// Variable: ALL_GAMES_QUERY
// Query: *[_type == "games"] | order(name desc) {    _id,    name,    slug {      current    },    price,    details,    "image": image.asset->url,    "poster": poster.asset->url  }
export type ALL_GAMES_QUERYResult = Array<{
  _id: string;
  name: string | null;
  slug: {
    current: string | null;
  } | null;
  price: number | null;
  details: string | null;
  image: string | null;
  poster: string | null;
}>;

// Source: ./sanity/lib/games/getFeaturedGame.ts
// Variable: FEATURED_GAME_QUERY
// Query: *[      _type == "games" && slug.current == "madden-nfl-24-deluxe-ed"    ] | order(name asc) [0] {      _id,      name,      slug,      price,      details,     "image": image.asset->url,      "poster": poster.asset->url    }
export type FEATURED_GAME_QUERYResult = {
  _id: string;
  name: string | null;
  slug: Slug | null;
  price: number | null;
  details: string | null;
  image: string | null;
  poster: string | null;
} | null;

// Source: ./sanity/lib/games/getGameBySlug.ts
// Variable: GAME_BY_SLUG_QUERY
// Query: *[     _type == "games" && slug.current == $slug    ] | order(name asc) [0] {        _id,        name,        slug,        price,        details,        "image": image.asset->url,        "poster": poster.asset->url        }
export type GAME_BY_SLUG_QUERYResult = {
  _id: string;
  name: string | null;
  slug: Slug | null;
  price: number | null;
  details: string | null;
  image: string | null;
  poster: string | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n    *[_type == \"banner\"][0] {\n      _id,\n      largeText,\n      smallText,\n      \"image\": image.asset->url,\n      \"overlay\": overlay.asset->url\n    }\n  ": BANNER_QUERYResult;
    "\n    *[_type == \"footer\"] {\n      _id,\n      categories,\n      cat_name,\n      top_games,\n      support,\n      support_name,\n      copy,\n      desc\n    }\n  ": FOOTER_QUERYResult;
    "\n     *[_type == \"games\"] | order(name desc) {\n    _id,\n    name,\n    slug {\n      current\n    },\n    price,\n    details,\n    \"image\": image.asset->url,\n    \"poster\": poster.asset->url\n  }\n  ": ALL_GAMES_QUERYResult;
    "\n    *[\n      _type == \"games\" && slug.current == \"madden-nfl-24-deluxe-ed\"\n    ] | order(name asc) [0] {\n      _id,\n      name,\n      slug,\n      price,\n      details,\n     \"image\": image.asset->url,\n      \"poster\": poster.asset->url\n    }\n  ": FEATURED_GAME_QUERYResult;
    "\n   *[ \n    _type == \"games\" && slug.current == $slug\n    ] | order(name asc) [0] {\n        _id,\n        name,\n        slug,\n        price,\n        details,\n        \"image\": image.asset->url,\n        \"poster\": poster.asset->url\n        }\n  ": GAME_BY_SLUG_QUERYResult;
  }
}
